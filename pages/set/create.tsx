import { NextPage } from "next";
import { useRouter } from "next/dist/client/router";
import Head from "next/head";
import "react-toastify/dist/ReactToastify.css";
import { toast, ToastContainer } from "react-toastify";
import GrayBackground from "../../components/GrayBackground";
import Header from "../../components/Header";
import { useAuthContext } from "../../context/Auth";
import React, {
  ChangeEvent,
  FormEventHandler,
  useEffect,
  useState,
} from "react";
import { TextField } from "../../components/TextField";
import Card from "../../components/Card";
import Button from "../../components/Button";
import axios from "axios";
import TermDefinitionCard from "../../components/TermDefinitonCard";

interface CardsState {
  order?: number;
  term?: string;
  definition?: string;
}

const CreateSet: NextPage = () => {
  const { user } = useAuthContext();
  const router = useRouter();
  const [title, setTitle] = useState("");
  const [desc, setDesc] = useState("");

  const [buttonDisabled, setButtonDisabled] = useState(false);
  const [cards, setCards] = useState<CardsState[]>([
    { order: 0, term: "", definition: "" },
    { order: 1, term: "", definition: "" },
    { order: 2, term: "", definition: "" },
    { order: 3, term: "", definition: "" },
  ]);

  useEffect(() => {
    if (!user) {
      toast.warn("💥 you must be logged in");
      setTimeout(() => {
        router.push("/");
      }, 2000);
    }

    return () => {};
  });

  const handleTermChange = (
    e: ChangeEvent<HTMLInputElement>,
    index: number
  ) => {
    const newCards = [...cards];
    newCards[index].term = e.target.value;
    setCards(newCards);
  };

  const handleDefinitionChange = (
    e: ChangeEvent<HTMLInputElement>,
    index: number
  ) => {
    const newCards = [...cards];
    newCards[index].definition = e.target.value;
    setCards(newCards);
  };

  const handleAddCard = () => {
    const index = cards.length - 1;
    const newCards = [...cards];
    newCards.push({ order: index, definition: "", term: "" });
    setCards(newCards);
  };

  const handleDeleteCard = (index: number) => {
    //Return if it's less than 1
    if (cards.length - 1 < 1) {
      toast.error("💔 Can't have less than 1 card1");
      return;
    }
    const newCards: CardsState[] = [];

    let order = 0;
    cards.forEach((card, i) => {
      if (i !== index) {
        newCards.push({
          term: card.term,
          definition: card.definition,
          order: order,
        });
        order += 1;
      }
    });
    setCards([...newCards]);
  };

  const handleSubmit: FormEventHandler = async (e) => {
    e.preventDefault();
    if (title == "") {
      toast.info("😪 Title of the set cannot be empty");
      return;
    }

    let filled = true;
    for (let i = 0; i < cards.length; i++) {
      if (cards[i].term == "" || cards[i].definition == "") {
        toast.info("🙁 Make sure you fill every card");
        filled = false;
      }
      if (!filled) break;
    }
    if (!filled) return;

    setButtonDisabled(true);

    const set = await axios.post("/api/set/create", {
      title,
      description: desc,
      cards,
      creatorId: user?.id,
    });
    if (set.status == 400) {
      toast.error("An error occured 🙁");
      setButtonDisabled(false);
    } else {
      toast("🤩 Set has been created");
      setTimeout(() => {
        router.push("/");
      }, 1000);
    }
  };

  return (
    <div>
      <Head>
        <title>Studify | Create a Set</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <ToastContainer position="top-center" autoClose={3000} />
      <GrayBackground />
      <Header />
      <form
        onSubmit={handleSubmit}
        className="px-9 mt-4 flex flex-col space-y-8 mb-14"
      >
        <div className="flex space-x-4 md:space-x-12">
          <TextField
            className="text-lg md:text-3xl"
            label="Title"
            placeholder="Study Set Title"
            type="text"
            onChange={(e) => setTitle(e.target.value)}
          />
          <TextField
            className="text-lg md:text-3xl"
            label="Description"
            placeholder="Description"
            type="text"
            onChange={(e) => setDesc(e.target.value)}
          />
        </div>
        <div className="flex flex-col space-y-4">
          {cards.map((card, i) => {
            return (
              <TermDefinitionCard
                key={i}
                termOnChange={(e) => handleTermChange(e, i)}
                definitionOnChange={(e) => handleDefinitionChange(e, i)}
                deleteButtonOnClick={() => handleDeleteCard(i)}
                term={card.term}
                defintion={card.definition}
              />
            );
          })}

          <Card className="p-5">
            <div
              onClick={handleAddCard}
              className="border-2 text-lg font-medium cursor-pointer transition-colors ease-in-out duration-200 text-accent-600 hover:text-primary-400 flex items-center justify-center border-accent-600 rounded-md border-dashed  w-full h-full p-14"
            >
              Add Card
            </div>
          </Card>
        </div>
        <Button
          disabled={buttonDisabled}
          type="submit"
          className="bg-green p-4 rounded-xl text-white"
        >
          Create Set
        </Button>
      </form>
    </div>
  );
};

export default CreateSet;
