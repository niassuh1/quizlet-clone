import { GetServerSideProps, NextPage } from "next";
import Head from "next/head";
import GrayBackground from "../../components/GrayBackground";
import Header from "../../components/Header";
import { SetType } from "../../types";
import prismaClient from "../../util/prismaclient";
import Image from "next/image";

// Import Swiper styles
import "swiper/css";
import "swiper/css/effect-cards";

import TabButton from "../../components/TabButton";

import { useAuthContext } from "../../context/Auth";
import Button from "../../components/Button";
import axios from "axios";
import { useRouter } from "next/dist/client/router";
import React, { ReactElement, useState } from "react";
import Link from "next/link";
import FlashCards from "../../components/FlashCards";
import LearnCards from "../../components/LearnCard";

interface SetSlugProps {
  set?: SetType;
}

interface MenuType {
  [mode: string]: ReactElement;
}

enum Modes {
  FLASHCARDS = "flashcards",
  LEARN = "learn",
}

const SetSlug: NextPage<SetSlugProps> = ({ set }) => {
  const { user } = useAuthContext();
  const route = useRouter();
  const [mode, setMode] = useState(Modes.FLASHCARDS);

  const tabMenu: MenuType = {
    flashcards: (
      <>
        <FlashCards cards={set?.card} />
      </>
    ),
    learn: (
      <>
        <LearnCards cards={set?.card} />
      </>
    ),
  };

  const handleDelete = async () => {
    const del = await axios.delete(`/api/set/delete`, {
      data: { id: set?.id },
    });
    if (del.status == 200) {
      route.push("/?action=delete");
    }
  };

  return (
    <div>
      <Head>
        <title>Studify</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <GrayBackground />
      <Header />
      <div className="px-9">
        <h1 className="text-lg font-medium mb-4">{set?.title}</h1>
        <div className="flex w-full justify-center space-x-4 mb-3">
          <TabButton
            selected={mode == Modes.FLASHCARDS}
            onClick={() => setMode(Modes.FLASHCARDS)}
          >
            <Image
              alt="flashcard"
              src="/images/flashcard-icon.svg"
              width={25}
              height={25}
            />
            <span>Flashcards</span>
          </TabButton>

          <TabButton
            selected={mode == Modes.LEARN}
            onClick={() => setMode(Modes.LEARN)}
          >
            <Image
              alt="Learn"
              src="/images/learning-icon.svg"
              width={25}
              height={25}
            />
            <span>Learn</span>
          </TabButton>
        </div>
        {user?.id == set?.creatorId ? (
          <div className="flex justify-center space-x-4">
            <Button
              onClick={handleDelete}
              className="flex bg-accent-500 hover:bg-accent-600 rounded-lg text-black px-6 py-2  mb-3"
            >
              Delete
            </Button>
            <Link href={`/set/edit/${set?.id}`} passHref>
              <a className="flex bg-primary-500 rounded-lg text-white px-6 py-2  mb-3">
                Edit
              </a>
            </Link>
          </div>
        ) : (
          <></>
        )}

        <div className="w-[calc(100%-6rem)] mx-auto max-w-[450px] h-[300px] items-center justify-center">
          {tabMenu[mode]}
        </div>
      </div>
    </div>
  );
};

export const getServerSideProps: GetServerSideProps = async ({ query }) => {
  const slug = query.slug as string;

  const set = await prismaClient.set.findUnique({
    where: { id: slug },
    select: {
      description: true,
      id: true,
      title: true,
      creatorId: true,
      card: { orderBy: { order: "asc" } },
    },
  });

  return { props: { set } };
};

export default SetSlug;
