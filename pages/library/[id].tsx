import { GetServerSideProps, NextPage } from "next";
import Head from "next/head";
import React, { useEffect, useState } from "react";

import { Swiper, SwiperSlide } from "swiper/react";
import "swiper/css";
import GrayBackground from "../../components/GrayBackground";
import Header from "../../components/Header";
import SetCard from "../../components/SetCard";
import { SetType } from "../../types";
import prismaClient from "../../util/prismaclient";
import IconButton from "../../components/IconButton";
import { MdDelete, MdEdit } from "react-icons/md";
import { useAuthContext } from "../../context/Auth";
import { useRouter } from "next/dist/client/router";
import Link from "next/link";
import Button from "../../components/Button";
import axios from "axios";
import { toast, ToastContainer } from "react-toastify";

interface LibraryProps {
  userSets?: SetType[];
  creatorId?: string;
}

const Library: NextPage<LibraryProps> = ({ userSets, creatorId }) => {
  const { user } = useAuthContext();
  const [isCreator, setIsCreator] = useState(false);
  const [creator, setCreator] = useState("");
  const route = useRouter();

  useEffect(() => {
    setIsCreator(user?.id == creatorId);
    if (!creator) {
      axios
        .post(`/api/user/${userSets![0].creatorId}`)
        .then((body) => {
          setCreator(body.data.name);
        })
        .catch();
    }

    return () => {};
  }, [creator, creatorId, user?.id, userSets]);

  const handleDelete = async (index: number) => {
    const del = await axios.delete(`/api/set/delete`, {
      data: { id: userSets![index].id },
    });
    if (del.status == 200) {
      toast.success("ðŸ¥³ Saves has been changed");
    }
  };
  return (
    <div>
      <Head>
        <title>Studify</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <ToastContainer />
      <GrayBackground />
      <Header />

      <div className="px-9 flex flex-col">
        <div className="flex justify-between items-center  mb-4">
          <h1 className="text-xl font-medium">
            {isCreator ? "Your library" : `${creator}'s Library`}
          </h1>
          <Link href="/set/create" passHref>
            <a>
              <Button className="bg-green hover:bg-darkGreen items-center space-x-2  text-white rounded-md p-2">
                Create Set
              </Button>
            </a>
          </Link>
        </div>

        <div className="flex w-full ">
          <Swiper
            slidesPerView={1}
            breakpoints={{
              850: {
                slidesPerView: 2,
              },
              1395: {
                slidesPerView: 3,
              },
            }}
            spaceBetween={20}
            className="flex w-full"
          >
            {userSets?.map((set, index) => {
              return (
                <SwiperSlide className="pb-16" key={set.id}>
                  <SetCard
                    title={set.title}
                    amount={set.card?.length}
                    description={set.description}
                    id={set.id}
                    footer={
                      isCreator ? (
                        <div className="flex  space-x-2">
                          <Link href={`/set/edit/${set.id}`} passHref>
                            <IconButton
                              Icon={MdEdit}
                              className="self-center hover:bg-accent-400"
                            />
                          </Link>
                          <IconButton
                            Icon={MdDelete}
                            className="self-center hover:bg-accent-400"
                            onClick={() => handleDelete(index)}
                          />
                        </div>
                      ) : (
                        <></>
                      )
                    }
                  />
                </SwiperSlide>
              );
            })}
          </Swiper>
        </div>
      </div>
    </div>
  );
};

export const getServerSideProps: GetServerSideProps = async ({ query }) => {
  const creatorId = query.id as string;
  const userSets = await prismaClient.set.findMany({
    where: {
      creatorId: {
        equals: creatorId,
      },
    },
    select: {
      title: true,
      id: true,
      description: true,
      creatorId: true,
      card: true,
    },
    orderBy: {
      created_at: "desc",
    },
  });
  return { props: { userSets, creatorId } };
};

export default Library;
